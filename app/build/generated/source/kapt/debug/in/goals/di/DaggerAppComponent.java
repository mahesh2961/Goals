// Generated by Dagger (https://google.github.io/dagger).
package in.goals.di;

import android.app.Activity;
import android.content.Context;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import in.goals.GoalApp;
import in.goals.GoalApp_MembersInjector;
import in.goals.activities.GoalsActivity;
import in.goals.activities.GoalsActivity_MembersInjector;
import in.goals.database.AppDatabase;
import in.goals.database.GoalDao;
import in.goals.database.GoalRepository;
import in.goals.database.RoomModule;
import in.goals.database.RoomModule_ProvideRepoFactory;
import in.goals.database.RoomModule_ProvidesGoalsDaoFactory;
import in.goals.database.RoomModule_ProvidesRoomDatabaseFactory;
import in.goals.fragment.BaseFragment_MembersInjector;
import in.goals.fragment.GoalsListFragment;
import in.goals.fragment.GoalsListFragment_MembersInjector;
import in.goals.network.ApiHandler;
import in.goals.network.NetworkManager;
import in.goals.network.NetworkModule;
import in.goals.network.NetworkModule_BuildNetworkApiFactory;
import in.goals.network.NetworkModule_ProvideGoalsNetworkLayerFactory;
import in.goals.viewmodels.GoalListViewModel;
import in.goals.viewmodels.GoalListViewModel_Factory;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_ContributeGoalsActivity.GoalsActivitySubcomponent.Builder>
      goalsActivitySubcomponentBuilderProvider;

  private Provider<ActivityModule_ContributeGoalsFragment.GoalsListFragmentSubcomponent.Builder>
      goalsListFragmentSubcomponentBuilderProvider;

  private Provider<Context> appContextProvider;

  private Provider<AppDatabase> providesRoomDatabaseProvider;

  private Provider<GoalDao> providesGoalsDaoProvider;

  private Provider<ApiHandler> buildNetworkApiProvider;

  private Provider<NetworkManager> provideGoalsNetworkLayerProvider;

  private Provider<GoalRepository> provideRepoProvider;

  private GoalListViewModel_Factory goalListViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<InjectingViewModelFactory> injectingViewModelFactoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(GoalsActivity.class, (Provider) goalsActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.goalsActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_ContributeGoalsActivity.GoalsActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_ContributeGoalsActivity.GoalsActivitySubcomponent.Builder get() {
            return new GoalsActivitySubcomponentBuilder();
          }
        };
    this.goalsListFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityModule_ContributeGoalsFragment.GoalsListFragmentSubcomponent.Builder>() {
          @Override
          public ActivityModule_ContributeGoalsFragment.GoalsListFragmentSubcomponent.Builder
              get() {
            return new GoalsListFragmentSubcomponentBuilder();
          }
        };
    this.appContextProvider = InstanceFactory.create(builder.appContext);
    this.providesRoomDatabaseProvider =
        DoubleCheck.provider(
            RoomModule_ProvidesRoomDatabaseFactory.create(builder.roomModule, appContextProvider));
    this.providesGoalsDaoProvider =
        DoubleCheck.provider(
            RoomModule_ProvidesGoalsDaoFactory.create(
                builder.roomModule, providesRoomDatabaseProvider));
    this.buildNetworkApiProvider =
        DoubleCheck.provider(NetworkModule_BuildNetworkApiFactory.create(builder.networkModule));
    this.provideGoalsNetworkLayerProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideGoalsNetworkLayerFactory.create(
                builder.networkModule, buildNetworkApiProvider));
    this.provideRepoProvider =
        DoubleCheck.provider(
            RoomModule_ProvideRepoFactory.create(
                builder.roomModule, providesGoalsDaoProvider, provideGoalsNetworkLayerProvider));
    this.goalListViewModelProvider = GoalListViewModel_Factory.create(provideRepoProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1)
            .put(GoalListViewModel.class, (Provider) goalListViewModelProvider)
            .build();
    this.injectingViewModelFactoryProvider =
        DoubleCheck.provider(
            InjectingViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(GoalApp arg0) {
    injectGoalApp(arg0);
  }

  private GoalApp injectGoalApp(GoalApp instance) {
    GoalApp_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder extends AppComponent.Builder {
    private RoomModule roomModule;

    private NetworkModule networkModule;

    private GoalApp seedInstance;

    private Context appContext;

    @Override
    public AppComponent build() {
      if (roomModule == null) {
        this.roomModule = new RoomModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(GoalApp.class.getCanonicalName() + " must be set");
      }
      if (appContext == null) {
        throw new IllegalStateException(Context.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public void seedInstance(GoalApp arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public Builder appContext(Context appContext) {
      this.appContext = Preconditions.checkNotNull(appContext);
      return this;
    }
  }

  private final class GoalsActivitySubcomponentBuilder
      extends ActivityModule_ContributeGoalsActivity.GoalsActivitySubcomponent.Builder {
    private GoalsActivity seedInstance;

    @Override
    public ActivityModule_ContributeGoalsActivity.GoalsActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(GoalsActivity.class.getCanonicalName() + " must be set");
      }
      return new GoalsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(GoalsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class GoalsActivitySubcomponentImpl
      implements ActivityModule_ContributeGoalsActivity.GoalsActivitySubcomponent {
    private GoalsActivitySubcomponentImpl(GoalsActivitySubcomponentBuilder builder) {}

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return Collections
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              singletonMap(
                  GoalsListFragment.class,
                  (Provider) DaggerAppComponent.this.goalsListFragmentSubcomponentBuilderProvider);
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @Override
    public void inject(GoalsActivity arg0) {
      injectGoalsActivity(arg0);
    }

    private GoalsActivity injectGoalsActivity(GoalsActivity instance) {
      GoalsActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }

  private final class GoalsListFragmentSubcomponentBuilder
      extends ActivityModule_ContributeGoalsFragment.GoalsListFragmentSubcomponent.Builder {
    private GoalsListFragment seedInstance;

    @Override
    public ActivityModule_ContributeGoalsFragment.GoalsListFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            GoalsListFragment.class.getCanonicalName() + " must be set");
      }
      return new GoalsListFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(GoalsListFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class GoalsListFragmentSubcomponentImpl
      implements ActivityModule_ContributeGoalsFragment.GoalsListFragmentSubcomponent {
    private GoalsListFragmentSubcomponentImpl(GoalsListFragmentSubcomponentBuilder builder) {}

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return Collections
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              singletonMap(
                  GoalsListFragment.class,
                  (Provider) DaggerAppComponent.this.goalsListFragmentSubcomponentBuilderProvider);
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @Override
    public void inject(GoalsListFragment arg0) {
      injectGoalsListFragment(arg0);
    }

    private GoalsListFragment injectGoalsListFragment(GoalsListFragment instance) {
      BaseFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      GoalsListFragment_MembersInjector.injectVmFactory(
          instance, DaggerAppComponent.this.injectingViewModelFactoryProvider.get());
      return instance;
    }
  }
}
