// Generated by Dagger (https://google.github.io/dagger).
package in.goals.network;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NetworkModule_ProvideGoalsNetworkLayerFactory
    implements Factory<NetworkManager> {
  private final NetworkModule module;

  private final Provider<ApiHandler> apiHandlerProvider;

  public NetworkModule_ProvideGoalsNetworkLayerFactory(
      NetworkModule module, Provider<ApiHandler> apiHandlerProvider) {
    this.module = module;
    this.apiHandlerProvider = apiHandlerProvider;
  }

  @Override
  public NetworkManager get() {
    return provideInstance(module, apiHandlerProvider);
  }

  public static NetworkManager provideInstance(
      NetworkModule module, Provider<ApiHandler> apiHandlerProvider) {
    return proxyProvideGoalsNetworkLayer(module, apiHandlerProvider.get());
  }

  public static NetworkModule_ProvideGoalsNetworkLayerFactory create(
      NetworkModule module, Provider<ApiHandler> apiHandlerProvider) {
    return new NetworkModule_ProvideGoalsNetworkLayerFactory(module, apiHandlerProvider);
  }

  public static NetworkManager proxyProvideGoalsNetworkLayer(
      NetworkModule instance, ApiHandler apiHandler) {
    return Preconditions.checkNotNull(
        instance.provideGoalsNetworkLayer(apiHandler),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
